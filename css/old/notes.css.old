/*
Bootstrap's JavaScript components, such as the Carousel and Tooltips, offer ways to manipulate the components by using either HTML data-* attributes or by writing JavaScript.
The JavaScript used in Bootstrap is through a very popular JS library called jQuery.
jQuery was first created in 2006 and is the most popular JavaScript library in the world. At the time it was created, it offered powerful ways to do tasks that were otherwise difficult at the time, such as selecting DOM elements, handling cross-browser issues, and more.
Since then, advances in browser technology and in JavaScript itself have made it easy to handle such tasks without using jQuery, and as a result, jQuery has begun to experience a decline in usage.
However, its usage is so widespread that it will still continue to be relevant for some time. A 2019 report from w3techs.com states that jQuery is still used on over 74% of all websites. So it is still useful to know how to use jQuery. 
We will not be studying jQuery in depth in this course, but the next two lessons will cover examples of how to manipulate Bootstrap components with it. 




CSS PREPROCESSORS and Sass, sassy css

premier CSS extension language.

Sass is completely compatible with all versions of CSS. We take this compatibility seriously, so that you can seamlessly use any available CSS libraries.

Sass has been actively supported for over 14 years by its loving Core Team.

There are an endless number of frameworks built with Sass. Compass, Bourbon, and Susy just to name a few.

CSS preprocessors are stylesheet scripting languages that take CSS one step further, adding powerful features such as variables, functions, mixins, and more. They make it easier to write and maintain large, complex stylesheets. Stylesheet files written with preprocessors are compiled to regular CSS syntax before deployment. 
Sass is the CSS preprocessor that's used to write the source CSS code for Bootstrap 4, and thus it is useful to learn Sass if you ever want to theme Bootstrap or customize its source code. 
There are other CSS preprocessors; the one used to write Bootstrap 3 is called Less. 
There are two variants of Sass - Sass (.sass) and Scss (.scss) - there are a few syntactic differences but their functionality is the same.
In the next lesson, you will learn how to use a little Sass, then how to install and use a Sass compiler.

SassScript is itself a scripting language. Its typing discipline is dynamic. SCSS is often called Sassy CSS, which was introduced as the main syntax for the SASS (Syntactically Awesome Style Sheets), which builds on top of the existing CSS syntax. It makes use of semicolons and brackets like CSS (Cascaded Style Sheets). SCSS is a superset of CSS, i.e. all the CSS features will be available in SCSS and contains few features of the SASS (Syntactically Awesome Style Sheets). SCSS makes any CSS term as a valid one.

Add Scss variables
Open the nucampsite project folder in VS Code. In the css folder, create a file named styles.scss. 
Into this file, copy all the code over from styles.css.
Add the following Scss variables into the file at the top:
$color-primary: #3046C5;
$color-black-transparent: rgba(0, 0, 0, 0.5);

$body-font: "Open Sans", sans-serif;
$header-font: "Lobster", cursive;

Use the Scss Variables
Update the .scss file with Scss variables for the following rulesets:

body {
    font-family: $body-font;
}

.jumbotron {
    margin: 0;
    padding: 30px;
    background-image: linear-gradient(to right, $color-secondary, $color-primary, $color-dark);
    color: white;
}

.carousel-caption {
    background-color: $color-black-transparent;
}

NESTING SELECTORS

Replace the CSS rule for "header h2" in your .scss file with the following:

header {
    h2 {
        color: $color-pale;
    }
}

INSTALL THE CSS COMPILER

Next, use NPM to install a sass compiler. 

IMPORTANT! Check your Node version using the node -v command. 
Type the following into your bash terminal from inside your project folder. If your Node version is a 14.x version, enter:

npm install --save-dev node-sass@4.14.1

If your Node version is a 15.x version, enter:
npm install --save-dev node-sass@5.0.0


COMPILATION SCRIPT ADD, TO package.json, file

Open your package.json file in VS Code, and add the following line into the scripts object there. 
This script makes use of the node-sass utility to compile the .scss  file into a .css  file. 
"scss": "node-sass -o css/ css/"

Make sure that you add a comma to the end of the line above it (unless you add this as the very first line in the scripts object). Compare your package.json's scripts object to this code:

  "scripts": {
    "lite": "lite-server",
    "scss": "node-sass -o css/ css/",
    "start": "npm run lite",
    "test": "echo \"Error: no test specified\" && exit 1"
  },


RUN THE CSS COMPILER

If you want to save your previous styles.css file, this would be a good time to MOVE IT OR RENAME, WITHOUT THE .CSS AS THE END.  something like styles.css.old. This is not a required step, but recommended since the Scss compiler will overwrite the existing css file. 
Now in order to compile the .scss file to a .css file using the script you defined previously, type the following into your bash terminal, from the nucampsite folder:
npm run scss
This should have created a new styles.css file in your css folder. If you saved a backup of your old styles.css file, you should be able to compare it and see that they are the same. 

BUILDING AND DEPLOYMENT: NPM SCRIPTS

Prepare for building by moving your jQuery script for the carousel to an external JavaScript file.
Install the onchange module to enable your project to to watch for changes to its files.
Install the parallelshell module to enable your project to run multiple NPM scripts in parallel.
Watch for any changes to your Sass file and automatically compile it to css.

Instructions
Move the jQuery script into external script file

Create a folder named js inside VSCode

Create a file named scripts.js inside js folder

Open index.html and cut out the jQuery code inside the script element at the bottom (but leave the script tags) and move this code to the scripts.js file. 

In index.html, update the <script> element from which you removed the jQuery code as follows:
<script src="js/scripts.js"></script>

WATCH FOR CHANGES,AND RUN IN PARALLEL

First, from your bash shell inside your project folder, install the NPM package onchange as a DEV-DEPENDENCY:

npm install --save-dev onchange@7.0.0

Then install the package parallelshell with the following command, including the -E flag. The -E flag lets npm know that we want to install parallelshell at the exact 3.0.1 version this time and all times in the future. This is important here because the 3.0.2 version of parallelshell contains a bug that we wish to avoid. 

npm install --save-dev -E parallelshell@3.0.1

Add the following two scripts to the script object in package.json. The syntax will be slightly different based on your operating system:


Windows:
. . .
   "watch:scss": "onchange \"css/*.scss\" -- npm run scss",
    "watch:all": "parallelshell \"npm run watch:scss\" \"npm run lite\""
  },
. . .
*** Make sure that you add a comma to the end of the line above these lines.*** There should be a comma between each script in the scripts object, except the final one.

Update the START SCRIPT IN PACKAGE.JSON as follows:

    "start": "npm run watch:all",
Then, type the following at the prompt to start watching for changes to the Sass file, compile it to CSS, and run the server:

npm start

Now, whenever you make any changes to styles.scss file, it will automatically be compiled to the corresponding .css file. 

You can test this by making a small change to your styles.scss file, and you'll be able to see the recompilation happen in real time. 

NPM SCRIPTS, PART 2, DEPLOYMENT:

process of building a distribution folder by writing NPM scripts, including:
Storing copies of all Font-Awesome icon files
Compress or minify images
Minify and uglify code files
Clean up the distribution folder
Generate the distribution files with an NPM command

INSTRUCTIONS:

Copy Font-Awesome Fonts
Your project uses Font-Awesome fonts. These need to be copied to the distribution folder. To help us do this, install the copyfiles NPM module globally as follows (you may need to use sudo on MacOS and Linux):

npm install --save-dev copyfiles@2.2.0

Then add the following script in package.json within the scripts object:
. . .
    "copyfonts": "copyfiles -f node_modules/font-awesome/fonts/* dist/fonts",
. . .
 You can assume that all scripts you are asked to add in this section will be added to the scripts object in package.json. 
 
 The order that they are added in does not technically matter; you may choose to alphabetize them, or order them by type, or not concern yourself with an order at all. 
 
 Just make sure that they ALL HAVE A COMMA AT THE END OF EACH SCIPT, EXCEPT, for the final one.


Compress and Minify Images
We will use the imagemin-cli NPM module to compress images to a smaller size without loss of quality. Install the module as follows (you may need to use sudo on MacOS and Linux):
npm install --save-dev imagemin-cli@5.1.0
NOTE: Some MacOS students have encountered issues with imagemin-cli not installing its plugins due to issues with global permissions on MacOS. If this happens, try:
sudo npm install imagemin-cli@5.1.0 --save-dev --unsafe-perm=true --allow-root
Then add the following script:
. . .
   "imagemin": "imagemin img/* -o dist/img",
. . .

Concatenate, minify, and uglify 
Install the usemin-cli npm module as below:
npm install --save-dev usemin-cli@0.6.0
This module will automatically install the usemin module, and the usemin module will automatically install a CSS minifier module named clean-css, a JavaScript minifier and uglifier module named uglify-js, and an HTML minification module named html-minifier.
Add the following script below. It will tell usemin to process the HTML files specified, and it will automatically also run the CSS and JavaScript minifying and uglifying processes on any linked .css/.js files:
. . .
   "usemin": "usemin contactus.html -d dist --htmlmin -o dist/contactus.html && usemin aboutus.html -d dist --htmlmin -o dist/aboutus.html && usemin index.html -d dist --htmlmin -o dist/index.html",
. . .
Now open index.html and surround all the css links code in the <head> as follows, with the build:css and endbuild comments:
. . .
    <!-- build:css css/main.css -->
    <link rel="stylesheet" href="node_modules/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="node_modules/font-awesome/css/font-awesome.min.css" />
    <link rel="stylesheet" href="node_modules/bootstrap-social/bootstrap-social.css" />
    <link rel="stylesheet" href="css/styles.css" />
    <!-- endbuild -->
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Lobster|Open+Sans" />
. . .
Notice that we've pulled the Google fonts list out to after the endbuild comment, since it's not a local file.
Do the same in aboutus.html and contactus.html.

Similarly, open index.html and surround the js script code as follows:
. . .
    <!-- build:js js/main.js -->
    <script src="node_modules/jquery/dist/jquery.slim.min.js"></script>
    <script src="node_modules/popper.js/dist/umd/popper.min.js"></script>
    <script src="node_modules/bootstrap/dist/js/bootstrap.min.js"></script>
    <script src="js/scripts.js"></script>
    <!-- endbuild -->
. . .
Add this change to aboutus.html and contactus.html as well.

AUTOMATE DIST FOLDER CLEANUP:

Install the rimraf npm module by typing the following at the prompt:
npm install --save-dev rimraf@3.0.2
Then, set up the following script:
    "clean": "rimraf dist",
This utility simply deletes the dist folder, if it exists, and all files in it, effectively "cleaning" it. 

BUILD THE DISTRIBUTION FOLDER:

Also add this script, which strings together commands to run a folder cleaning utility (which we'll add later), to run the copyfonts script, and to run the usemin script. 
. . .
    "build": "npm run clean && npm run imagemin && npm run copyfonts && npm run usemin",
. . .
Finally, to build the distribution folder, type the following at the prompt:
npm run build
This will create the dist folder containing the files that are a self-contained version of your project. 
Take a moment to look around the contents of the dist folder and see what's inside. Especially notice that all your local CSS and JavaScript files have been merged into a single file, and if you look inside them, you can see that they have been optimized for deployment. 
If you have a web server that hosts your website, you can now copy the contents of this folder to it and view your work online.

Note
There are many different workflows to ready your files for deployment. This is only one of them, so do not take it as canonical. In the real world, you will run into other methods such as using the module bundler Webpack, or task runners such as Grunt and Gulp. 

Optional: GITIGNORE
Open your .gitignore file in your editor and update it so that it reads as follows, preventing the "dist" folder from being added to the git repository:
node_modules
dist
Commit all the changes to your local repository with the message "NPM Scripts Part 2". Push the commit to your remote repository.



